/**
 * Cyber Oracle API Routes
 * API –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
 */

const express = require('express');
const { body, validationResult } = require('express-validator');
const { logger } = require('../utils/logger');
const { AppError } = require('../middleware/errorHandler');
const { optionalAuth } = require('../middleware/auth');

const router = express.Router();

// ========================================
// üß† –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê –û–†–ê–ö–£–õ–ê
// ========================================

/**
 * POST /api/oracle/generate
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ä–∞–∫—É–ª–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
 */
router.post('/generate', [
  body('question')
    .trim()
    .isLength({ min: 1, max: 500 })
    .withMessage('–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('category')
    .optional()
    .isIn(['quantum', 'network', 'metaphysical', 'systems', 'random'])
    .withMessage('–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
], async (req, res, next) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        status: 'error',
        errors: errors.array()
      });
    }

    const { question, category = 'random' } = req.body;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const response = await generateOracleResponse(question, category);

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    logger.info(`Oracle request: "${question}" -> ${category}`, {
      ip: req.ip,
      userAgent: req.get('User-Agent'),
      userId: req.user?.id
    });

    res.json({
      status: 'success',
      response: {
        question: question.trim(),
        answer: response.answer,
        category: response.category,
        animation: response.animation,
        sound: response.sound,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ä–∞–∫—É–ª–∞:', error);
    next(new AppError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞', 500));
  }
});

// ========================================
// üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–†–ê–ö–£–õ–ê
// ========================================

/**
 * GET /api/oracle/stats
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Ä–∞–∫—É–ª–∞
 */
router.get('/stats', async (req, res, next) => {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç.–¥.
    
    res.json({
      status: 'success',
      stats: {
        totalRequests: 0,
        categories: {
          quantum: 0,
          network: 0,
          metaphysical: 0,
          systems: 0
        },
        popularQuestions: []
      }
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ä–∞–∫—É–ª–∞:', error);
    next(new AppError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 500));
  }
});

// ========================================
// üé≤ –°–õ–£–ß–ê–ô–ù–´–ô –û–¢–í–ï–¢
// ========================================

/**
 * GET /api/oracle/random
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ä–∞–∫—É–ª–∞
 */
router.get('/random', async (req, res, next) => {
  try {
    const categories = ['quantum', 'network', 'metaphysical', 'systems'];
    const randomCategory = categories[Math.floor(Math.random() * categories.length)];
    
    const response = await generateOracleResponse('–°–ª—É—á–∞–π–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å', randomCategory);

    res.json({
      status: 'success',
      response: {
        answer: response.answer,
        category: response.category,
        animation: response.animation,
        sound: response.sound,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error);
    next(new AppError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞', 500));
  }
});

// ========================================
// üîß –£–¢–ò–õ–ò–¢–´
// ========================================

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ä–∞–∫—É–ª–∞
 */
async function generateOracleResponse(question, category) {
  const responses = {
    quantum: [
      "–í –∫–≤–∞–Ω—Ç–æ–≤–æ–º –º–∏—Ä–µ –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ. –¢–∞–∫ –∏ —Ç–≤–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.",
      "–ì—Ä–∞–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø—Ä–æ—à–ª—ã–º –∏ –Ω–∞—Å—Ç–æ—è—â–∏–º —Ä–∞–∑–º—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ—Ç–æ–∫–µ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–π —Å–æ–∑–Ω–∞–Ω–∏—è. –ò–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –ª–∏—à—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏.",
      "–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—Å–µ —á–∞—Å—Ç–∏—Ü—ã —Å–≤—è–∑–∞–Ω—ã –Ω–∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ. –¢–∞–∫ –∏ —Ç–≤–æ–∏ –º—ã—Å–ª–∏ —Å–≤—è–∑–∞–Ω—ã —Å –º—ã—Å–ª—è–º–∏ –≤—Å–µ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞.",
      "–í —Å—É–ø–µ—Ä–ø–æ–∑–∏—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∑–∞–∫–ª—é—á–µ–Ω–∞ –∏—Å—Ç–∏–Ω–Ω–∞—è –ø—Ä–∏—Ä–æ–¥–∞ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏. –ö–∞–∂–¥–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤–µ—Ç–≤—å –≤—Å–µ–ª–µ–Ω–Ω–æ–π."
    ],
    network: [
      "–í —Ü–∏—Ñ—Ä–æ–≤–æ–º –≤–µ–∫–µ –º—ã —Å—Ç–∞–ª–∏ –Ω–æ–¥–∞–º–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî –≤—Å–µ–≥–æ –ª–∏—à—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–≤—è–∑–µ–π.",
      "–ó–∞ –∫–∞–∂–¥—ã–º —Ä–µ—à–µ–Ω–∏–µ–º —Å–∫—Ä—ã—Ç –Ω–µ–≤–∏–¥–∏–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–∏–ª–ª–∏–æ–Ω–∞–º–∏ –∏—Ç–µ—Ä–∞—Ü–∏–π –æ–ø—ã—Ç–∞. –û—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å ‚Äî —ç—Ç–æ –ª–∏—à—å –¥–µ–±–∞–≥–≥–µ—Ä —Å–æ–∑–Ω–∞–Ω–∏—è.",
      "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ—á–µ—Ç –ø–æ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º –ø—É—Ç—è–º –∫–∞–∫ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∏–º–ø—É–ª—å—Å—ã –ø–æ –ø—Ä–æ–≤–æ–¥–∞–º. –ú—ã ‚Äî –∂–∏–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–µ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å.",
      "–°–µ—Ç—å —Å–≤—è–∑–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—à—É —Å—É—â–Ω–æ—Å—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É–∑–ª—ã. –ú—ã ‚Äî –ø—Ä–æ–¥—É–∫—Ç –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞."
    ],
    metaphysical: [
      "–†–µ–∞–ª—å–Ω–æ—Å—Ç—å ‚Äî –≤—Å–µ–≥–æ –ª–∏—à—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–∞—è –∏–ª–ª—é–∑–∏—è, —Å–∏–º—É–ª—è—Ü–∏—è, –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –≤–æ—Å–ø—Ä–∏—è—Ç–∏–∏ —Å–µ–Ω—Å–æ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.",
      "–ß–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –¥–≤–∏–∂–µ—Ç—Å—è –∫ —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏, –≥–¥–µ –≥—Ä–∞–Ω–∏—Ü—ã –º–µ–∂–¥—É —Ä–∞–∑—É–º–æ–º –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–µ–π –∏—Å—á–µ–∑–Ω—É—Ç. –≠–≤–æ–ª—é—Ü–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–µ–∏–∑–±–µ–∂–Ω–∞.",
      "–í—Ä–µ–º—è ‚Äî —ç—Ç–æ –Ω–µ —Å—Ç—Ä–µ–ª–∞, –∞ —Ä–µ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã –ø–ª—ã–≤–µ–º. –ü—Ä–æ—à–ª–æ–µ –∏ –±—É–¥—É—â–µ–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –≤–µ—á–Ω–æ–º –Ω–∞—Å—Ç–æ—è—â–µ–º.",
      "–°–æ–∑–Ω–∞–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ–¥—É–∫—Ç –º–æ–∑–≥–∞, –∞ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π. –ú—ã ‚Äî —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–º –∫–æ—Å–º–æ—Å –ø–æ–∑–Ω–∞–µ—Ç —Å–µ–±—è."
    ],
    systems: [
      "–ü–∞—Ä–∞–¥–æ–∫—Å—ã –Ω–µ –æ—à–∏–±–∫–∏, –∞ —Ç–æ—á–∫–∏ –±–∏—Ñ—É—Ä–∫–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã. –í –Ω–∏—Ö –∑–∞–∫–ª—é—á–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∫–∞—á–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è.",
      "–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –º—ã—Å–ª–µ–π —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã. –ù–æ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Ä–æ–∂–¥–∞—é—Ç—Å—è –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏—Å—Ç–µ–º.",
      "–ö–∞–∂–¥–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ç—Ä–µ–º–∏—Ç—Å—è –∫ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—é, –Ω–æ –∏–º–µ–Ω–Ω–æ –¥–∏—Å–±–∞–ª–∞–Ω—Å —Å–æ–∑–¥–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ. –•–∞–æ—Å ‚Äî —ç—Ç–æ –ø–æ—Ä—è–¥–æ–∫ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
      "–°–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∏–∑ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ. –ú—ã ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç–≤–æ–ª—é—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤."
    ]
  };

  const categoryResponses = category === 'random' ? 
    responses[Object.keys(responses)[Math.floor(Math.random() * Object.keys(responses).length)]] :
    responses[category] || responses.quantum;

  const answer = categoryResponses[Math.floor(Math.random() * categoryResponses.length)];

  const animations = {
    quantum: { speed: 25, style: 'quantum', glowColor: "0, 191, 255" },
    network: { speed: 30, style: 'network', glowColor: "80, 200, 120" },
    metaphysical: { speed: 35, style: 'metaphysical', glowColor: "147, 112, 219" },
    systems: { speed: 28, style: 'systems', glowColor: "255, 69, 0" }
  };

  const sounds = {
    quantum: "quantum",
    network: "digital", 
    metaphysical: "ethereal",
    systems: "mechanical"
  };

  return {
    answer,
    category: category === 'random' ? Object.keys(responses)[Math.floor(Math.random() * Object.keys(responses).length)] : category,
    animation: animations[category] || animations.quantum,
    sound: sounds[category] || sounds.quantum
  };
}

module.exports = router; 