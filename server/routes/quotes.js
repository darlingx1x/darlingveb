/**
 * Quotes API Routes
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ PHP endpoints –¥–ª—è —Ü–∏—Ç–∞—Ç
 */

const express = require('express');
const { body, validationResult } = require('express-validator');
const { logger } = require('../utils/logger');
const { AppError } = require('../middleware/errorHandler');
const { authenticateToken } = require('../middleware/auth');
const Quote = require('../models/GitHubQuote');

const router = express.Router();

// ========================================
// üìñ –ü–û–õ–£–ß–ï–ù–ò–ï –¶–ò–¢–ê–¢
// ========================================

/**
 * GET /api/quotes
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã (–∑–∞–º–µ–Ω—è–µ—Ç get-quotes.php)
 */
router.get('/', async (req, res, next) => {
  try {
    const { page = 1, limit = 50, author, search } = req.query;
    
    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –ø–æ–∏—Å–∫–∞
    const whereClause = {};
    if (author) {
      whereClause.author = { [Quote.sequelize.Op.like]: `%${author}%` };
    }
    if (search) {
      whereClause[Quote.sequelize.Op.or] = [
        { text: { [Quote.sequelize.Op.like]: `%${search}%` } },
        { author: { [Quote.sequelize.Op.like]: `%${search}%` } }
      ];
    }

    const offset = (page - 1) * limit;
    
    const quotes = await Quote.findAndCountAll({
      where: whereClause,
      order: [['createdAt', 'DESC']],
      limit: parseInt(limit),
      offset: parseInt(offset)
    });

    logger.info(`–¶–∏—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: ${quotes.rows.length} –∏–∑ ${quotes.count}`);

    res.json({
      status: 'success',
      quotes: quotes.rows,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(quotes.count / limit),
        totalQuotes: quotes.count,
        hasNext: offset + quotes.rows.length < quotes.count,
        hasPrev: page > 1
      }
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç:', error);
    next(new AppError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç', 500));
  }
});

// ========================================
// ‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –¶–ò–¢–ê–¢–´
// ========================================

/**
 * POST /api/quotes
 * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–∏—Ç–∞—Ç—É (–∑–∞–º–µ–Ω—è–µ—Ç submit-quote.php)
 */
router.post('/', [
  body('text')
    .trim()
    .isLength({ min: 1, max: 1000 })
    .withMessage('–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('author')
    .trim()
    .isLength({ min: 1, max: 100 })
    .withMessage('–ê–≤—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤')
], async (req, res, next) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        status: 'error',
        errors: errors.array()
      });
    }

    const { text, author } = req.body;

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ü–∏—Ç–∞—Ç—ã
    const newQuote = await Quote.create({
      text: text.trim(),
      author: author.trim(),
      ip: req.ip,
      userAgent: req.get('User-Agent')
    });

    logger.info(`–ù–æ–≤–∞—è —Ü–∏—Ç–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ID ${newQuote.id}`);

    res.status(201).json({
      status: 'success',
      message: '–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
      quote: {
        id: newQuote.id,
        text: newQuote.text,
        author: newQuote.author,
        createdAt: newQuote.createdAt
      }
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
    next(new AppError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã', 500));
  }
});

// ========================================
// üîç –ü–û–õ–£–ß–ï–ù–ò–ï –û–î–ù–û–ô –¶–ò–¢–ê–¢–´
// ========================================

/**
 * GET /api/quotes/:id
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ü–∏—Ç–∞—Ç—É –ø–æ ID
 */
router.get('/:id', async (req, res, next) => {
  try {
    const { id } = req.params;
    
    const quote = await Quote.findByPk(id);
    
    if (!quote) {
      return next(new AppError('–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 404));
    }

    res.json({
      status: 'success',
      quote
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
    next(new AppError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã', 500));
  }
});

// ========================================
// ‚úèÔ∏è –û–ë–ù–û–í–õ–ï–ù–ò–ï –¶–ò–¢–ê–¢–´ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
// ========================================

/**
 * PUT /api/quotes/:id
 * –û–±–Ω–æ–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
 */
router.put('/:id', authenticateToken, [
  body('text')
    .optional()
    .trim()
    .isLength({ min: 1, max: 1000 })
    .withMessage('–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('author')
    .optional()
    .trim()
    .isLength({ min: 1, max: 100 })
    .withMessage('–ê–≤—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤')
], async (req, res, next) => {
  try {
    const { id } = req.params;
    const { text, author } = req.body;

    const quote = await Quote.findByPk(id);
    
    if (!quote) {
      return next(new AppError('–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 404));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    if (text) quote.text = text.trim();
    if (author) quote.author = author.trim();
    
    await quote.save();

    logger.info(`–¶–∏—Ç–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ID ${id}`);

    res.json({
      status: 'success',
      message: '–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      quote
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
    next(new AppError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã', 500));
  }
});

// ========================================
// üóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï –¶–ò–¢–ê–¢–´ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
// ========================================

/**
 * DELETE /api/quotes/:id
 * –£–¥–∞–ª–∏—Ç—å —Ü–∏—Ç–∞—Ç—É (—Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
 */
router.delete('/:id', authenticateToken, async (req, res, next) => {
  try {
    const { id } = req.params;
    
    const quote = await Quote.findByPk(id);
    
    if (!quote) {
      return next(new AppError('–¶–∏—Ç–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 404));
    }

    await quote.destroy();

    logger.info(`–¶–∏—Ç–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞: ID ${id}`);

    res.json({
      status: 'success',
      message: '–¶–∏—Ç–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
    next(new AppError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–∏—Ç–∞—Ç—ã', 500));
  }
});

// ========================================
// üé≤ –°–õ–£–ß–ê–ô–ù–ê–Ø –¶–ò–¢–ê–¢–ê
// ========================================

/**
 * GET /api/quotes/random/one
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
 */
router.get('/random/one', async (req, res, next) => {
  try {
    const quote = await Quote.findOne({
      order: Quote.sequelize.random()
    });

    if (!quote) {
      return next(new AppError('–¶–∏—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 404));
    }

    res.json({
      status: 'success',
      quote
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã:', error);
    next(new AppError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã', 500));
  }
});

// ========================================
// üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¶–ò–¢–ê–¢
// ========================================

/**
 * GET /api/quotes/stats/overview
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–∏—Ç–∞—Ç
 */
router.get('/stats/overview', async (req, res, next) => {
  try {
    const totalQuotes = await Quote.count();
    const todayQuotes = await Quote.count({
      where: {
        createdAt: {
          [Quote.sequelize.Op.gte]: new Date(new Date().setHours(0, 0, 0, 0))
        }
      }
    });

    // –¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤
    const topAuthors = await Quote.findAll({
      attributes: [
        'author',
        [Quote.sequelize.fn('COUNT', Quote.sequelize.col('id')), 'count']
      ],
      group: ['author'],
      order: [[Quote.sequelize.fn('COUNT', Quote.sequelize.col('id')), 'DESC']],
      limit: 10
    });

    res.json({
      status: 'success',
      stats: {
        totalQuotes,
        todayQuotes,
        topAuthors
      }
    });

  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    next(new AppError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', 500));
  }
});

module.exports = router; 