// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================================
// üë• –ú–û–î–ï–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
// ========================================
model User {
  id       Int     @id @default(autoincrement())
  username String  @unique @db.VarChar(30)
  email    String  @unique @db.VarChar(100)
  password String  @db.VarChar(255)
  role     Role    @default(USER)
  isActive Boolean @default(true)

  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  lastLoginAt DateTime?
  lastLoginIp String?   @db.VarChar(45)
  ip          String?   @db.VarChar(45)
  userAgent   String?   @db.Text

  // –°–≤—è–∑–∏
  quotes         Quote[]         @relation("UserQuotes")
  oracleRequests OracleRequest[] @relation("UserOracleRequests")
  analytics      Analytics[]     @relation("UserAnalytics")
  sessions       Session[]       @relation("UserSessions")
  books          Book[]          @relation("UserBooks")
  timeEntries    TimeEntry[]     @relation("UserTimeEntries")

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// ========================================
// üìù –ú–û–î–ï–õ–¨ –¶–ò–¢–ê–¢–´
// ========================================
model Quote {
  id     Int    @id @default(autoincrement())
  text   String @db.Text
  author String @db.VarChar(100)

  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  ip         String? @db.VarChar(45)
  userAgent  String? @db.Text
  likes      Int     @default(0)
  category   String? @default("general") @db.VarChar(50)
  tags       Json?   @default("[]")
  isApproved Boolean @default(true)

  // –°–≤—è–∑–∏
  userId Int?
  user   User? @relation("UserQuotes", fields: [userId], references: [id], onDelete: SetNull)

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([author])
  @@index([category])
  @@index([isApproved])
  @@map("quotes")
}

// ========================================
// üß† –ú–û–î–ï–õ–¨ –û–†–ê–ö–£–õ–ê
// ========================================
model OracleRequest {
  id       Int    @id @default(autoincrement())
  question String @db.Text
  answer   String @db.Text
  category String @db.VarChar(50)

  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  ip        String? @db.VarChar(45)
  userAgent String? @db.Text

  // –°–≤—è–∑–∏
  userId Int?
  user   User? @relation("UserOracleRequests", fields: [userId], references: [id], onDelete: SetNull)

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([category])
  @@map("oracle_requests")
}

// ========================================
// üìä –ú–û–î–ï–õ–¨ –ê–ù–ê–õ–ò–¢–ò–ö–ò
// ========================================
model Analytics {
  id    Int    @id @default(autoincrement())
  event String @db.VarChar(100)
  data  Json?

  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  ip        String? @db.VarChar(45)
  userAgent String? @db.Text
  sessionId String? @db.VarChar(100)

  // –°–≤—è–∑–∏
  userId Int?
  user   User? @relation("UserAnalytics", fields: [userId], references: [id], onDelete: SetNull)

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt DateTime @default(now())

  @@index([event])
  @@index([createdAt])
  @@map("analytics")
}

// ========================================
// üîê –ú–û–î–ï–õ–¨ –°–ï–°–°–ò–ô
// ========================================
model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique @db.VarChar(255)
  expiresAt DateTime

  // –°–≤—è–∑–∏
  userId Int
  user   User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt DateTime @default(now())

  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

// ========================================
// üìö –ú–û–î–ï–õ–¨ –ö–ù–ò–ì
// ========================================
model Book {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(200)
  author      String    @db.VarChar(100)
  description String?   @db.Text
  coverUrl    String?   @db.VarChar(500)
  rating      Float?    @default(0)
  readAt      DateTime?

  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  category String? @db.VarChar(50)
  tags     Json?   @default("[]")
  notes    String? @db.Text

  // –°–≤—è–∑–∏
  userId Int?
  user   User? @relation("UserBooks", fields: [userId], references: [id], onDelete: SetNull)

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([title])
  @@index([author])
  @@index([category])
  @@map("books")
}

// ========================================
// ‚è∞ –ú–û–î–ï–õ–¨ –í–†–ï–ú–ï–ù–ò
// ========================================
model TimeEntry {
  id          Int       @id @default(autoincrement())
  project     String    @db.VarChar(100)
  description String?   @db.Text
  startTime   DateTime
  endTime     DateTime?
  duration    Int? // –≤ –º–∏–Ω—É—Ç–∞—Ö

  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  category     String? @db.VarChar(50)
  tags         Json?   @default("[]")
  productivity Int?    @default(0) // 0-100

  // –°–≤—è–∑–∏
  userId Int?
  user   User? @relation("UserTimeEntries", fields: [userId], references: [id], onDelete: SetNull)

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([project])
  @@index([startTime])
  @@index([category])
  @@map("time_entries")
}

// ========================================
// üè∑Ô∏è ENUM –¢–ò–ü–´
// ========================================
enum Role {
  USER
  ADMIN
  MODERATOR
}

// ========================================
// üìä –ò–ù–î–ï–ö–°–´ –î–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
// ========================================
// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ 
